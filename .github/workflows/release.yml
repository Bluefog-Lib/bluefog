on:
  push:
    tags:
      - 'v*'

name: Release

jobs:
  build:
    name: Github Release 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Wrap the examples
        run: |
          bash scripts/wrap_examples.sh
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./examples.tar.gz
          asset_name: examples.tar.gz
          asset_content_type: application/tar+gzip
  deploy:
    name: PyPI Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        run: |
          python setup.py sdist
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*
  docker:
    name: DockerHub Release
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Wrap the examples
        run: |
          bash scripts/wrap_examples.sh
      - name: Build CPU image
        run: docker build . --file dockerfile.cpu --tag bluefog:cpu
      - name: Build GPU image
        run: docker build . --file dockerfile.gpu --tag bluefog:gpu
      - name: Log into DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo VERSION=$VERSION
          docker tag bluefog:cpu bluefog:cpu-$VERSION
          docker tag bluefog:gpu bluefog:gpu-$VERSION
          docker push bluefog:cpu-$VERSION
          docker push bluefog:gpu-$VERSION
